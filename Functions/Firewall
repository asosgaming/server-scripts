
#* --------------------------------------------------------------
#? #DESC: Check if firewall is active
#? --------------------------------------------------------------
#? #USAGE: Firewall:Active
#? #RETURN: $TRUE if the firewall is active, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Active() {
    if systemctl is-active --quiet firewalld; then
        Output:Success "Firewall is running."
        return $TRUE
    else
        Output:Error "Firewall is not running."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if firewall is inactive
#? --------------------------------------------------------------
#? #USAGE: Firewall:Inactive
#? #RETURN: $TRUE if the firewall is inactive, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Inactive() {
    if systemctl is-active --quiet firewalld; then
        Output:Error "Firewall is running."
        return $FALSE
    else
        Output:Success "Firewall is not running."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if firewall zone exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone <zone_name>
#? #RETURN: $TRUE if the zone exists, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Zone() {
    local zone_name="$1"
    if [ -z "${zone_name}" ]; then
        Output:Error "No zone name specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} exists."
        return $TRUE
    else
        Output:Error "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Delete firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Delete <zone_name>
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Delete() {
    local zone_name="$1"
    if [ -z "${zone_name}" ]; then
        Output:Error "No zone name specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --delete-zone="${zone_name}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} deleted successfully."
            return $TRUE
        else
            Output:Error "Failed to delete firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to delete."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Create firewall zone if it does not exist
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Create <zone_name>
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Create() {
    local zone_name="$1"
    if [ -z "${zone_name}" ]; then
        Output:Error "No zone name specified."
        return $FALSE
    fi

    if ! firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --new-zone="${zone_name}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} created successfully."
            return $TRUE
        else
            Output:Error "Failed to create firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} already exists, nothing to create."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if source attached to firewall zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Source <zone_name> <zone_source>
#? #RETURN: $TRUE if the subnet is attached, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Zone:Source() {
    local zone_name="$1"
    local zone_source="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_source}" ]; then
        Output:Error "Zone name or source not specified."
        return $FALSE
    fi

    if firewall-cmd --zone=${zone_name} --list-all | grep '^  sources:' | grep -q "${zone_source}"; then
        Output:Success "Source ${COLOR_CYAN}${zone_source}${COLOR_RESET} is attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
        return $TRUE
    else
        Output:Error "Source ${COLOR_CYAN}${zone_source}${COLOR_RESET} is not attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Add source to firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Source:Add <zone_name> <zone_source>
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Source:Add() {
    local zone_name="$1"
    local zone_source="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_source}" ]; then
        Output:Error "Zone name or source not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --add-source="${zone_source}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Source ${COLOR_CYAN}${zone_source}${COLOR_RESET} added to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to add source ${COLOR_CYAN}${zone_source}${COLOR_RESET} to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to add source to."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Remove source from firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Source:Delete <zone_name> <zone_source>
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Source:Delete() {
    local zone_name="$1"
    local zone_source="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_source}" ]; then
        Output:Error "Zone name or source not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --remove-source="${zone_source}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Source ${COLOR_CYAN}${zone_source}${COLOR_RESET} removed from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to remove source ${COLOR_CYAN}${zone_source}${COLOR_RESET} from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to remove source from."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if interface attached to firewall zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Interface <zone_name> <interface_name>
#? #RETURN: $TRUE if the interface is attached, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Zone:Interface() {
    local zone_name="$1"
    local interface_name="$2"
    if [ -z "${zone_name}" ] || [ -z "${interface_name}" ]; then
        Output:Error "Zone name or interface name not specified."
        return $FALSE
    fi

    if firewall-cmd --zone=${zone_name} --list-all | grep '^  interfaces:' | grep -q "${interface_name}"; then
        Output:Success "Interface ${COLOR_CYAN}${interface_name}${COLOR_RESET} is attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
        return $TRUE
    else
        Output:Error "Interface ${COLOR_CYAN}${interface_name}${COLOR_RESET} is not attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Get list of interfaces attached to firewall zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Interfaces <zone_name> <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Interfaces() {
    local zone_name="$1"
    local variable_name="$2"
    if [ -z "${zone_name}" ]; then
        Output:Error "Zone name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        local interfaces=$(firewall-cmd --zone="${zone_name}" --list-interfaces)
        if [ -n "${interfaces}" ]; then
            eval "${variable_name}=\"${interfaces}\""
            Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} has interface(s) ${COLOR_CYAN}${interfaces}${COLOR_RESET}."
            return $TRUE
        else
            Output:Warning "No interfaces attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $TRUE
        fi
    else
        Output:Error "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist."
        return $FALSE
    fi
}
#* --------------------------------------------------------------
#? #DESC: Add interface to firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Interface:Add <zone_name> <interface_name>
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Interface:Add() {
    local zone_name="$1"
    local interface_name="$2"
    if [ -z "${zone_name}" ] || [ -z "${interface_name}" ]; then
        Output:Error "Zone name or interface name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --add-interface="${interface_name}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Interface ${COLOR_CYAN}${interface_name}${COLOR_RESET} added to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to add interface ${COLOR_CYAN}${interface_name}${COLOR_RESET} to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to add interface to."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Remove interface from firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Interface:Delete <zone_name> <interface_name>
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Interface:Delete() {
    local zone_name="$1"
    local interface_name="$2"
    if [ -z "${zone_name}" ] || [ -z "${interface_name}" ]; then
        Output:Error "Zone name or interface name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --remove-interface="${interface_name}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Interface ${COLOR_CYAN}${interface_name}${COLOR_RESET} removed from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to remove interface ${COLOR_CYAN}${interface_name}${COLOR_RESET} from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to remove interface from."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Set target of firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Target <zone_name> "<target> or <variable_name>"
#? #INFO: Target can be one of: default, ACCEPT, DROP, REJECT
#? #INFO: If target is not one of the above, it is treated as a variable name
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Target() {
    local zone_name="$1"
    local zone_target="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_target}" ]; then
        Output:Error "Zone name or target not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        case "${zone_target}" in
            default|ACCEPT|DROP|REJECT)
                firewall-cmd --permanent --zone="${zone_name}" --set-target="${zone_target}" > >(Log:Output) 2> >(Log:Error)
                if [ $? -eq 0 ]; then
                    Output:Success "Target for firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} set to ${COLOR_CYAN}${zone_target}${COLOR_RESET} successfully."
                    return $TRUE
                else
                    Output:Error "Failed to set target for firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
                    return $FALSE
                fi
            ;;
            *)
                eval "${zone_target}=$(firewall-cmd --zone=${zone_name} --list-all | grep '^  target:' | cut -d ' ' -f 4-)"
                if [ -z "${!zone_target}" ]; then
                    Output:Error "Zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not have a target set or the variable name is incorrect."
                    return $FALSE
                fi

                return $TRUE               
            ;;
        esac
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to set target for."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Add port to firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Port:Add <zone_name> "<zone_port>/<zone_protocol>"
#? #INFO: Protocol can be tcp or udp
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Port:Add() {
    local zone_name="$1"
    local zone_port="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_port}" ]; then
        Output:Error "Zone name or port not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --add-port="${zone_port}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Port ${COLOR_CYAN}${zone_port}${COLOR_RESET} added to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to add port ${COLOR_CYAN}${zone_port}${COLOR_RESET} to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to add port to."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Remove port from firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Port:Delete <zone_name> "<zone_port>/<zone_protocol>"
#? #INFO: Protocol can be tcp or udp
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Port:Delete() {
    local zone_name="$1"
    local zone_port="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_port}" ]; then
        Output:Error "Zone name or port not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --remove-port="${zone_port}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Port ${COLOR_CYAN}${zone_port}${COLOR_RESET} removed from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to remove port ${COLOR_CYAN}${zone_port}${COLOR_RESET} from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to remove port from."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: List all ports in firewall zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Ports <zone_name> <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Ports() {
    local zone_name="$1"
    local variable_name="$2"
    if [ -z "${zone_name}" ]; then
        Output:Error "Zone name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        local zone_ports=$(firewall-cmd --zone="${zone_name}" --list-ports)
        if [ -n "${zone_ports}" ]; then
            eval "${variable_name}=\"${zone_ports}\""
            Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} has port(s) ${COLOR_CYAN}${zone_ports}${COLOR_RESET}."
            return $TRUE
        else
            Output:Warning "No ports attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $TRUE
        fi
    else
        Output:Error "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: List all protocols in firewall zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Protocols <zone_name> <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Protocols() {
    local zone_name="$1"
    local variable_name="$2"
    if [ -z "${zone_name}" ]; then
        Output:Error "Zone name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        local zone_protocols=$(firewall-cmd --zone="${zone_name}" --list-protocols)
        if [ -n "${zone_protocols}" ]; then
            eval "${variable_name}=\"${zone_protocols}\""
            Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} has protocol(s) ${COLOR_CYAN}${zone_protocols}${COLOR_RESET}."
            return $TRUE
        else
            Output:Warning "No protocols attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $TRUE
        fi
    else
        Output:Error "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Add protocol to firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Protocol:Add <zone_name> <zone_protocol>
#? #INFO: Protocol can be tcp or udp
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Protocol:Add() {
    local zone_name="$1"
    local zone_protocol="$2"
    if [ -z "${zone_name}" ] || [ -z "${zone_protocol}" ]; then
        Output:Error "Zone name or protocol not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="${zone_name}" --add-protocol="${zone_protocol}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Protocol ${COLOR_CYAN}${zone_protocol}${COLOR_RESET} added to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to add protocol ${COLOR_CYAN}${zone_protocol}${COLOR_RESET} to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to add protocol to."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Remove protocol from firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Protocol:Delete <zone_name> <zone_protocol>
#? #INFO: Protocol can be tcp or udp
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Protocol:Delete() {
    local zone_name="$1"
    local zone_protocol="$2"
    if [ -z "$zone_name" ] || [ -z "${zone_protocol}" ]; then
        Output:Error "Zone name or protocol not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "${zone_name}"; then
        firewall-cmd --permanent --zone="$zone_name" --remove-protocol="${zone_protocol}" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Protocol ${COLOR_CYAN}${zone_protocol}${COLOR_RESET} removed from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to remove protocol ${COLOR_CYAN}${zone_protocol}${COLOR_RESET} from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to remove protocol from."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: List all services in firewall zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Services <zone_name> <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Services() {
    local zone_name="$1"
    local variable_name="$2"
    if [ -z "$zone_name" ]; then
        Output:Error "Zone name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "$zone_name"; then
        local services=$(firewall-cmd --zone="$zone_name" --list-services)
        if [ -n "$services" ]; then
            eval "${variable_name}=\"${services}\""
            Output:Success "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} has service(s) ${COLOR_CYAN}${services}${COLOR_RESET}."
            return $TRUE
        else
            Output:Warning "No services attached to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $TRUE
        fi
    else
        Output:Error "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Add service to firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Service:Add <zone_name> <service_name>
#? #INFO: Service name should be a valid service defined in /etc/firewalld/services/
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Service:Add() {
    local zone_name="$1"
    local service_name="$2"
    if [ -z "$zone_name" ] || [ -z "${service_name}" ]; then
        Output:Error "Zone name or service name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "$zone_name"; then
        firewall-cmd --permanent --zone="$zone_name" --add-service="$service_name" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Service ${COLOR_CYAN}${service_name}${COLOR_RESET} added to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to add service ${COLOR_CYAN}${service_name}${COLOR_RESET} to firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to add service to."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Remove service from firewall zone if it exists
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Service:Delete <zone_name> <service_name>
#? #INFO: Service name should be a valid service defined in /etc/firewalld/services/
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zone:Service:Delete() {
    local zone_name="$1"
    local service_name="$2"
    if [ -z "$zone_name" ] || [ -z "${service_name}" ]; then
        Output:Error "Zone name or service name not specified."
        return $FALSE
    fi

    if firewall-cmd --get-zones | grep -qw "$zone_name"; then
        firewall-cmd --permanent --zone="$zone_name" --remove-service="$service_name" > >(Log:Output) 2> >(Log:Error)
        if [ $? -eq 0 ]; then
            Output:Success "Service ${COLOR_CYAN}${service_name}${COLOR_RESET} removed from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} successfully."
            return $TRUE
        else
            Output:Error "Failed to remove service ${COLOR_CYAN}${service_name}${COLOR_RESET} from firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
            return $FALSE
        fi
    else
        Output:Warning "Firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET} does not exist, nothing to remove service from."
        return $TRUE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if service is set in zone
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zone:Service <zone_name> <service_name>
#? #RETURN: $TRUE if the service exists in the zone, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Zone:Service() {
    local zone_name="$1"
    local service_name="$2"
    if [ -z "$zone_name" ] || [ -z "${service_name}" ]; then
        Output:Error "Zone name or service name not specified."
        return $FALSE
    fi

    if firewall-cmd --zone=${zone_name} --list-services | grep -qw "${service_name}"; then
        Output:Success "Service ${COLOR_CYAN}${service_name}${COLOR_RESET} exists in firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
        return $TRUE
    else
        Output:Error "Service ${COLOR_CYAN}${service_name}${COLOR_RESET} does not exist in firewall zone ${COLOR_CYAN}${zone_name}${COLOR_RESET}."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Get list of all firewall zones
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zones <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zones() {
    local variable_name="$1"
    local zones=$(firewall-cmd --get-zones)
    if [ -n "${zones}" ]; then
        if [ -n "$variable_name" ]; then
            eval "${variable_name}=\"${zones}\""
        fi
        Output:Success "Available firewall zones: ${COLOR_CYAN}${zones}${COLOR_RESET}."
        return $TRUE
    else
        Output:Error "No firewall zones available."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Get list of all active firewall zones
#? --------------------------------------------------------------
#? #USAGE: Firewall:Zones:Active <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Zones:Active() {
    local variable_name="$1"
    local active_zones=$(firewall-cmd --get-active-zones)
    if [ -n "${active_zones}" ]; then
        if [ -n "$variable_name" ]; then
            eval "${variable_name}=\"${active_zones}\""
        fi
        Output:Success "Active firewall zones: ${COLOR_CYAN}${active_zones}${COLOR_RESET}."
        return $TRUE
    else
        Output:Error "No active firewall zones available."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Get list of all services available in firewall
#? --------------------------------------------------------------
#? #USAGE: Firewall:Services <variable_name>
#? #INFO: If variable_name is provided, the list will be stored in that variable
#? #RETURN: $TRUE on success, $FALSE on failure
#* --------------------------------------------------------------
Firewall:Services() {
    local variable_name="$1"
    local services=$(firewall-cmd --get-services)
    if [ -n "${services}" ]; then
        if [ -n "${variable_name}" ]; then
            eval "${variable_name}=\"${services}\""
        fi
        Output:Success "Available firewall services: ${COLOR_CYAN}${services}${COLOR_RESET}."
        return $TRUE
    else
        Output:Error "No firewall services available."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if firewall is running
#? --------------------------------------------------------------
#? #USAGE: Firewall:Running
#? #RETURN: $TRUE if the firewall is running, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Running() {
    if systemctl is-active --quiet firewalld; then
        Output:Success "Firewall is running."
        return $TRUE
    else
        Output:Error "Firewall is not running."
        return $FALSE
    fi
}

#* --------------------------------------------------------------
#? #DESC: Check if service name is valid
#? --------------------------------------------------------------
#? #USAGE: Firewall:Service <service_name>
#? #RETURN: $TRUE if the service name is valid, $FALSE otherwise
#* --------------------------------------------------------------
Firewall:Service() {
    local service_name="$1"
    if [ -z "${service_name}" ]; then
        Output:Error "No service name specified."
        return $FALSE
    fi

    if firewall-cmd --get-services | grep -qw "${service_name}"; then
        Output:Success "Service ${COLOR_CYAN}${service_name}${COLOR_RESET} is valid."
        return $TRUE
    else
        Output:Error "Service ${COLOR_CYAN}${service_name}${COLOR_RESET} is not valid."
        return $FALSE
    fi
}







